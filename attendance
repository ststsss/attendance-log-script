#!/bin/zsh

script_dir="$(dirname "$(readlink -f "$0")")"

log_file="$script_dir/attendance-log.txt"

if [ ! -f $log_file ]; then
    touch $log_file
    echo "!!This file was generated automatically by the attendance script. Do not edit it!" >> $log_file
fi

only_total=false
omit_zero=false

get_duration_minutes() {
    start_time=$1
    end_time=$2
    start_seconds=$(date -j -f "%Y-%m-%dT%H:%M:%S" $start_time +%s)
    end_seconds=$(date -j -f "%Y-%m-%dT%H:%M:%S" $end_time +%s)
    duration_seconds=$(( end_seconds - start_seconds ))
    if [ $duration_seconds -lt 0 ]; then
        duration_seconds=$(( duration_seconds + 86400 ))
    fi
    duration_minutes=$(( duration_seconds / 60 ))
    echo $duration_minutes
}

calculate_total_minutes() {
    start_times=$1
    end_times=$2
    total_minutes=0
    IFS=$'\n'
    for i in $(paste -d' ' <(echo "$start_times") <(echo "$end_times") | awk '{print $1, $2}'); do
        start_time=$(echo $i | cut -d' ' -f1)
        end_time=$(echo $i | cut -d' ' -f2)
        if [ -n "$start_time" ] && [ -n "$end_time" ]; then
            duration_minutes=$(get_duration_minutes $start_time $end_time)
            total_minutes=$(( total_minutes + duration_minutes ))
        fi
    done
    echo $total_minutes
}

get_weekday_japanese() {
    input_date=$1
    weekday_number=$(date -j -f "%Y-%m-%d" "$input_date" "+%u")

    case $weekday_number in
        1)
            weekday="月曜日"
            ;;
        2)
            weekday="火曜日"
            ;;
        3)
            weekday="水曜日"
            ;;
        4)
            weekday="木曜日"
            ;;
        5)
            weekday="金曜日"
            ;;
        6)
            weekday="土曜日"
            ;;
        7)
            weekday="日曜日"
            ;;
    esac

    echo $weekday
}

display_individual_times() {
    start_times=$1
    end_times=$2
    IFS=$'\n'
    for i in $(paste -d' ' <(echo "$start_times") <(echo "$end_times") | awk '{print $1, $2}'); do
        start_time=$(echo $i | cut -d' ' -f1)
        end_time=$(echo $i | cut -d' ' -f2)
        start_time_only=$(echo $start_time | cut -dT -f2 | cut -d: -f1,2)
        end_time_only=$(echo $end_time | cut -dT -f2 | cut -d: -f1,2)
        if [ -n "$start_time_only" ] && [ -n "$end_time_only" ]; then
            printf "   ・%s~%s\n" "$start_time_only" "$end_time_only"
        fi
    done
}

while getopts ":osetwm:r" opt; do
    case $opt in
        o)
            only_total=true
            ;;
        r)
            omit_zero=true
            ;;
        s)
            option=s
            ;;
        e)
            option=e
            ;;
        t)
            option=t
            ;;
        w)
            option=w
            ;;
        m)
            option=m
            month_arg=$OPTARG
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

case $option in
    s) # start time
        last_line=$(tail -n 1 $log_file)
        if [[ $last_line == start:* ]]; then
            while true; do
                echo "Previous end time not recorded"
                echo "Please enter the end time (HH:MM):"
                read start_time
                if [[ $start_time =~ ^[0-9]{2}:[0-9]{2}$ ]]; then
                    break
                fi
            done
            date_time=$(echo $last_line | cut -d: -f2)
            new_line="end:${date_time:0:10}T$start_time:00"
            echo $new_line >> $log_file
        else
            current_datetime=$(date +%Y-%m-%dT%H:%M:%S)
            new_line="start:${current_datetime}"
            echo $new_line >> $log_file
        fi
        ;;
    e) # end time
        last_line=$(tail -n 1 $log_file)
        if [[ $last_line == end:* ]]; then
            while true; do
                echo "Previous start time not recorded"
                echo "Please enter the start time (HH:MM):"
                read end_time
                if [[ $end_time =~ ^[0-9]{2}:[0-9]{2}$ ]]; then
                    break
                fi
            done
            date_time=$(echo $last_line | cut -d: -f2)
            new_line="end:${date_time:0:10}T$end_time:00"
            echo $new_line >> $log_file
        else
            current_datetime=$(date +%Y-%m-%dT%H:%M:%S)
            new_line="end:${current_datetime}"
            echo $new_line >> $log_file
        fi
        ;;
    t) # total time
        current_date=$(date +%Y-%m-%d)
        weekday=$(get_weekday_japanese $current_date)

        start_times=$(grep "start:${current_date}" $log_file | cut -d: -f2 -f3 -f4)
        end_times=$(grep "end:${current_date}" $log_file | cut -d: -f2 -f3 -f4)

        total_minutes=$(calculate_total_minutes "$start_times" "$end_times")
        printf "$current_date($weekday)"
        if [ $total_minutes -ge 60 ]; then
            printf ":%dh%01dm\n" $(( total_minutes / 60 )) $(( total_minutes % 60 ))
        else
            printf ":%01dm\n" $(( total_minutes % 60 ))
        fi

        if [ "$only_total" = "false" ]; then
            display_individual_times "$start_times" "$end_times"
        fi
        ;;
    w) # total time for the past 7 days
        total_minutes=0
        for i in {6..0}; do
            date=$(date -v-${i}d +%Y-%m-%d)
            weekday=$(get_weekday_japanese $date)
            start_times=$(grep "start:${date}" $log_file | cut -d: -f2 -f3 -f4)
            end_times=$(grep "end:${date}" $log_file | cut -d: -f2 -f3 -f4)

            day_total_minutes=$(calculate_total_minutes "$start_times" "$end_times")
            if [ $day_total_minutes -gt 0 ] || [ "$omit_zero" = "false" ]; then
                printf "$date($weekday)"
                if [ $day_total_minutes -ge 60 ]; then
                    printf ":%dh%01dm\n" $(( day_total_minutes / 60 )) $(( day_total_minutes % 60 ))
                else
                    printf ":%01dm\n" $(( day_total_minutes % 60 ))
                fi

                if [ "$only_total" = "false" ]; then
                    display_individual_times "$start_times" "$end_times"
                fi
            fi
            total_minutes=$(( total_minutes + day_total_minutes ))
        done
        printf "合計:%dh%01dm\n" $(( total_minutes / 60 )) $(( total_minutes % 60 ))
        ;;
    m) # total time for the specified month
        if [[ $2 =~ ^[0-9]+$ ]]; then
            month=$(printf "%02d" $2)
            current_year=$(date +%Y)
            days_in_month=$(cal $month $current_year | awk 'NF {DAYS = $NF}; END {print DAYS}')

            total_minutes=0
            for i in $(seq 1 $days_in_month); do
                day=$(printf "%02d" $i)
                date="${current_year}-${month}-${day}"
                weekday=$(get_weekday_japanese $date)
                start_times=$(grep "start:${date}" $log_file | cut -d: -f2 -f3 -f4)
                end_times=$(grep "end:${date}" $log_file | cut -d: -f2 -f3 -f4)

                day_total_minutes=$(calculate_total_minutes "$start_times" "$end_times")
                if [ $day_total_minutes -gt 0 ] || [ "$omit_zero" = "false" ]; then
                    printf "$date($weekday)"
                    if [ $day_total_minutes -ge 60 ]; then
                        printf ":%dh%01dm\n" $(( day_total_minutes / 60 )) $(( day_total_minutes % 60 ))
                    else
                        printf ":%01dm\n" $(( day_total_minutes % 60 ))
                    fi

                    if [ "$only_total" = "false" ]; then
                        display_individual_times "$start_times" "$end_times"
                    fi
                fi

                total_minutes=$(( total_minutes + day_total_minutes ))
            done
            printf "合計:%dh%01dm\n" $(( total_minutes / 60 )) $(( total_minutes % 60 ))
        else
            echo "Invalid month argument. Please enter a valid month number (1-12)."
        fi
        ;;
    *)
        echo "invalud arugument"

esac